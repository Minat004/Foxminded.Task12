@page "/history"
@using FinancialTime.Core.DTOs.FinOperation
@using FinancialTime.BlazorServerApp.Interfaces
@using FinancialTime.Core.DTOs.FinType
@inject ICategoryClient CategoryClient
@inject IHistoryClient HistoryClient

<PageTitle>History of operations</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-md-auto">
            <h3>History of operations</h3>
        </div>
        <div class="col-md-auto">
            <button type="button" class="btn btn-primary" @onclick="OpenAddModal">Add</button>
        </div>
    </div>
</div>

@if (_operationDtos is null)
{
    <div class="progress">
        <div class="progress-bar progress-bar-striped progress-bar-animated" 
             role="progressbar" 
             aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%"></div>
    </div>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Number</th>
            <th>Date</th>
            <th>Value</th>
            <th>Category</th>
            <th>Budget</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @{
            var num = 0;
        }
        @foreach (var operationDto in _operationDtos)
        {
            num++;
            <tr>
                <td>@num</td>
                <td>@operationDto.Date</td>
                <td>@operationDto.Value</td>
                <td>@operationDto.FinTypeName</td>
                <td>@operationDto.FinTypeBudget</td>
                <td>
                    <button type="button"
                            class="btn btn-primary"
                            @onclick="async () => await OpenEditModal(operationDto)">
                        Edit
                    </button>
                    <button type="button"
                            class="btn btn-danger"
                            @onclick="async () => await OpenDeleteDialogModal(operationDto.Id)">
                        Delete
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@if (IsOpenAddModal)
{
    <AddOperationModal OnClose="CloseAddModal"
                       OnSubmit="SubmitAddModal"
                       Categories="_categories"/>
}

@if (IsOpenEditModal)
{
    <EditOperationModal OnClose="CloseEditModal"
                        OnSubmit="SubmitEditModal"
                        Categories="_categories"
                        Operation="_selected"/>
}

@if (IsOpenDeleteDialogModal)
{
    <DialogModal Title="Delete operation"
                 Body="Are you sure delete operation from history?"
                 Id="_selectedId"
                 OnClose="CloseDeleteDialogModal"
                 OnSubmit="SubmitDeleteDialogModal"/>
}

@code {
    private List<FinOperationDto>? _operationDtos;

    private IEnumerable<FinTypeDto>? _categories;

    private FinOperationDto? _selected;

    private int _selectedId;
    
    private bool IsOpenAddModal;

    private bool IsOpenEditModal;

    private bool IsOpenDeleteDialogModal;

    protected override async Task OnInitializedAsync()
    {
        _categories = await CategoryClient.GetAllAsync();
        _operationDtos = new List<FinOperationDto>((await HistoryClient.GetAllAsync())!);
    }
    
    private async Task OpenAddModal()
    {
        IsOpenAddModal = true;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task CloseAddModal()
    {
        IsOpenAddModal = false;
        StateHasChanged();
        await Task.CompletedTask;
    }
    
    private async Task SubmitAddModal(FinOperationAddDto finOperationAddDto)
    {
        IsOpenAddModal = false;
        StateHasChanged();

        await HistoryClient.AddAsync(finOperationAddDto);
        
        _operationDtos = new List<FinOperationDto>((await HistoryClient.GetAllAsync())!);
    }
    
    private async Task OpenEditModal(FinOperationDto? operationDto)
    {
        _selected = operationDto;
        
        IsOpenEditModal = true;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task CloseEditModal()
    {
        IsOpenEditModal = false;
        StateHasChanged();
        await Task.CompletedTask;
    }
    
    private async Task SubmitEditModal(FinOperationDto operationDto)
    {
        IsOpenEditModal = false;
        StateHasChanged();

        var finOperationEditDto = new FinOperationEditDto()
        {
            Value = operationDto.Value,
            Date = operationDto.Date,
            FinTypeId = operationDto.FinTypeId
        };

        await HistoryClient.UpdateAsync(operationDto.Id, finOperationEditDto);
        
        _operationDtos = new List<FinOperationDto>((await HistoryClient.GetAllAsync())!);
    }
    
    private async Task OpenDeleteDialogModal(int id)
    {
        _selectedId = id;
        IsOpenDeleteDialogModal = true;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task CloseDeleteDialogModal()
    {
        IsOpenDeleteDialogModal = false;
        StateHasChanged();
        await Task.CompletedTask;
    }
    
    private async Task SubmitDeleteDialogModal(int id)
    {
        IsOpenDeleteDialogModal = false;
        StateHasChanged();
        await HistoryClient.DeleteAsync(id);
        _operationDtos = new List<FinOperationDto>((await HistoryClient.GetAllAsync())!);
    }
}