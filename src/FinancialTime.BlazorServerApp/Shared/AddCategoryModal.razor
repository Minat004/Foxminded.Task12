@using FinancialTime.Core.DTOs.FinType
@using FinancialTime.Core.Enums

<div class="modal fade show"
     aria-modal="true" 
     role="dialog"
     @onclick="Close">
    <div class="modal-dialog" @onclick:stopPropagation="true">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Add category</h4>
                <button type="button" class="btn btn-outline-danger" @onclick="Close">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="Category" OnValidSubmit="Submit">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <div class="form-group">
                        <label for="name" class="col-form-label">Name:</label>
                        <InputText @bind-Value="Category.Name" class="form-control" id="name"/>
                    </div>
                    <div class="form-group">
                        <label for="budget" class="col-form-label">Budget:</label>
                        <select class="form-select" id="budget" @bind="Category.Budget">
                            @foreach (var budget in _budgets!)
                            {
                                <option>@budget</option>
                            }
                        </select>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Add</button>
                        <button type="button" class="btn btn-outline-primary" @onclick="Close">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public EventCallback<FinTypeAddDto> OnSubmit { get; set; }

    private FinTypeAddDto Category = new();

    private IEnumerable<EBudget>? _budgets;

    protected override Task OnInitializedAsync()
    {
        _budgets = Enum.GetValues<EBudget>();
        Category.Budget = _budgets.First();
        
        return base.OnInitializedAsync();
    }

    private async Task Close()
    {
        await OnClose.InvokeAsync(true);
    }

    private async Task Submit()
    {
        var finTypeAddDto = Category;

        await OnSubmit.InvokeAsync(finTypeAddDto);
    }
}